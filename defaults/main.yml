---
wg_uplink_iface_ipv6: "{{ ansible_default_ipv6.interface }}"
wg_uplink_iface_ipv4: "{{ ansible_default_ipv4.interface }}"
wg_uplink_prefix_ipv6: "{{ ansible_default_ipv6.address ~ '/' ~ ansible_default_ipv6.prefix | ansible.utils.ipaddr('network/prefix') }}"
wg_uplink_prefix_ipv4: "{{ ansible_default_ipv4.network ~ '/' ~ ansible_default_ipv4.prefix }}"
wg_uplink_addresses: "{{ [ ansible_default_ipv6.address, ansible_default_ipv4.address] }}"

wg_tunnel_iface: wg0
wg_port: 51820

# The first IP addresses of these prefixes will be the server's addresses
# All subsuquent IPs will be for clients
wg_tunnel_prefix_ipv6: fd99:9999::/64
wg_tunnel_prefix_ipv4: 10.99.99.0/24

# FIXME do we need an IPv4 resolver as well? Does wireguard even support multiple resolvers?
wg_resolver: "{{ wg_tunnel_prefix_ipv6 | ansible.utils.ipaddr(1) | ansible.utils.ipaddr('address') }}"  # the server's tunnel IP

wg_hostname: vpn.foo.bar  # What clients will be connecting to
wg_name: "{{ wg_hostname }}"  # How the server is named in client apps

wg_config_dir: /etc/wireguard
wg_config_file: "{{ wg_config_dir }}/{{ wg_tunnel_iface }}.conf"

# Generate this combo by running this on the target host:
# privkey=$(wg genkey); echo -e "wg_private_key: $privkey\nwg_public_key:  $(echo $privkey | wg pubkey)"

# wg_private_key: ....
# wg_public_key: ....  # store this in a vaulted file

wg_dns_search_domains: []
# wg_dns_search_domains:
#   - foo.bar

wg_client_tunnel_flavors:
  - tunnel: full
    allowedips:
      - '0.0.0.0/0'
      - '::/0'
  - tunnel: split
    allowedips:
      - "{{ wg_uplink_prefix_ipv4 }}"
      - "{{ wg_uplink_prefix_ipv6 }}"
      - "{{ wg_tunnel_prefix_ipv4 }}"
      - "{{ wg_tunnel_prefix_ipv6 }}"

# Set to 0 or false to disable this in the [Peer] section
peer_persistentkeepalive: 10

wg_clients: [] # store this in a vaulted file
# Create clients by running the gen_wg_client.sh script:
#
# for user in henk frank rob; do ./gen_wg_client.sh $user; done
#
# wg_clients:
#   - name: henk
#     private_key: CFfO/LLB22RA+TMaEDLV4NJKf4SAz4VAGsH/2Lkrv2E=
#     public_key: dr79XUUKH7kiaDs1k8eJjgeHKzzvwjh3sP9+DHruFRE=
#     preshared_key: VKousrfIMfCWPDETsB1PaFUQ0P/44p4Y5r1uPE1y+Gs=
#   - name: frank
#     private_key: ED18vIO0we8H4wpW3jloCY1SH0dA7SBXGaC964hPd0E=
#     public_key: 0W93NJcL5LTTXur7LmVwyswp6NdIotKcxy+mz6y3BUg=
#     preshared_key: k18pJAaQU7WruAapsji+8RWwTNVj8Vn81qDPithr2kM=
#   - name: rob
#     private_key: 8AjD3LnXypjJH+V17CdGIo5Py505Ua8tLxNLMl/0pUY=
#     public_key: a8HyYDnc2qnAoi5Y3rk1wNIxhxmvlnoIIe9Hs946AjE=
#     preshared_key: Mdu2caAWNC9WEp4j5SKHNo36iIDuL4LsMPF+3K2Wxwc=

# Display client profiles as QR codes
wg_diplay_profiles: false

# Whether to export all profiles to a local ZIP file
# Also needs to set the path to it
wg_export_profiles: false
wg_export_profiles_dir: ~/tmp/foo

# emit only required information
stealth_mode: false